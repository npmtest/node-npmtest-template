{"/home/travis/build/npmtest/node-npmtest-template/test.js":"/* istanbul instrument in package npmtest_template */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-template/lib.npmtest_template.js":"/* istanbul instrument in package npmtest_template */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_template = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_template = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-template/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-template && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_template */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_template\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_template.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_template.rollup.js'] =\n            local.assetsDict['/assets.npmtest_template.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_template.__dirname + '/lib.npmtest_template.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/index.js":"'use strict';\n\nvar path = require('path');\nvar util = require('util');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required dependencies\n */\n\nlazy('is-glob', 'isGlob');\nlazy('mixin-object', 'mixin');\nlazy('extend-shallow', 'extend');\nlazy('loader-cache', 'LoaderCache');\nlazy('inflection', 'inflect');\nlazy('clone-deep', 'clone');\nlazy('collection-visit', 'visit');\nlazy('for-own', 'forOwn');\nlazy('en-route', 'router');\nlazy('get-value', 'get');\nlazy('set-value', 'set');\nlazy('layouts');\n\n/**\n * Local modules\n */\n\nvar viewFactory = require('./lib/factory/view');\nvar engines = require('./lib/engines');\nvar loaders = require('./lib/loaders');\nvar helpers = require('./lib/helpers');\nvar lookup = require('./lib/lookup');\nvar utils = require('./lib/utils');\nvar Base = require('./lib/base');\n\n/**\n * Create a new instance of `Template` with the given `options.\n *\n * ```js\n * var app = require('template')();\n * ```\n *\n * @param {Object} `options`\n * @api public\n */\n\nfunction Template(options) {\n  if (!(this instanceof Template)) {\n    return new Template(options);\n  }\n  Base.call(this, options);\n  this.init();\n}\n\n/**\n * Inherit `Base`\n */\n\nBase.extend(Template);\n\n/**\n * `Template` prototype methods\n */\n\nutils.delegate(Template.prototype, {\n  constructor: Template,\n\n  /**\n   * Initialize defaults\n   */\n\n  init: function () {\n    this._ = {};\n    this.listen();\n\n    engines(this);\n    helpers.methods(this);\n    lookup(this);\n\n    // temporary.\n    this.define('errors', {\n      compile: {\n        engine: 'cannot find an engine for: ',\n        method: 'expects engines to have a compile method',\n      },\n      render: {\n        callback: 'is async and expects a callback function: ',\n        engine: 'cannot find an engine for: ',\n        method: 'expects engines to have a render method',\n      }\n    });\n\n    this.loaders = {};\n    this.cache = {};\n    this.cache.data = {};\n\n    this.cache.context = {};\n    this.views = {};\n\n    this.define('Base', require('./lib/base'));\n    this.define('Collection', require('./lib/collection'));\n    this.define('Item', require('./lib/item'));\n    this.define('List', require('./lib/list'));\n    this.define('View', require('./lib/view'));\n    this.define('Views', require('./lib/views'));\n\n    this.viewTypes = {\n      layout: [],\n      renderable: [],\n      partial: []\n    };\n\n    this.inflections = {};\n    this.handlers(utils.methods);\n    this.delegateLoaders([\n      'loader',\n      'resolve',\n      'compose',\n      'iterator',\n    ]);\n\n    // initialize iterators and loaders\n    loaders.iterators(this);\n    loaders.base(this);\n    loaders.data(this);\n  },\n\n  /**\n   * Listen for events\n   */\n\n  listen: function () {\n    this.on('option', function (key, value) {\n      if (key === 'mixins') {\n        this.visit('mixin', value);\n      }\n    });\n  },\n\n  /**\n   * Load data onto `app.cache.data`\n   *\n   * ```js\n   * console.log(app.cache.data);\n   * //=> {};\n   *\n   * app.data('a', 'b');\n   * app.data({c: 'd'});\n   * console.log(app.cache.data);\n   * //=> {a: 'b', c: 'd'}\n   * ```\n   * @name .data\n   * @param {String|Object} `key` Key of the value to set, or object to extend.\n   * @param {any} `val`\n   * @return {Object} Returns the instance of `Template` for chaining\n   * @api public\n   */\n\n  data: function(key, val) {\n    if (arguments.length === 1) {\n      if (typeof key === 'string') {\n        if (key.indexOf('.') === -1) {\n          return this.cache.data[key];\n        }\n        if (lazy.isGlob(key)) {\n          this.compose('data')(key, val);\n          return this;\n        }\n        return lazy.get(this.cache.data, key);\n      }\n    }\n\n    if (typeof key === 'object') {\n      var args = [].slice.call(arguments);\n      key = [].concat.apply([], args);\n      this.visit('data', key);\n      return this;\n    }\n\n    lazy.set(this.cache.data, key, val);\n    this.emit('data', key, val);\n    return this;\n  },\n\n  /**\n   * Lazily initalize `router`, to allow options to\n   * be passed in after init.\n   */\n\n  lazyLoaders: function() {\n    if (!Object.keys(this.loaders).length) {\n      this.loaders = new lazy.LoaderCache(this.options);\n    }\n  },\n\n  /**\n   * Delegate loader methods\n   */\n\n  delegateLoaders: function (methods) {\n    this.lazyLoaders();\n    var loaders = this.loaders;\n    var self = this;\n\n    utils.arrayify(methods).forEach(function (method) {\n      self.define(method, function() {\n        return loaders[method].apply(loaders, arguments);\n      });\n    });\n  },\n\n  /**\n   * Create a new `Views` collection.\n   *\n   * ```js\n   * app.create('foo');\n   * app.foo('*.hbs');\n   * var view = app.foo.get('baz.hbs');\n   * ```\n   *\n   * @name .create\n   * @param  {String} `name` The name of the collection. Plural or singular form.\n   * @param  {Object} `opts` Collection options\n   * @param  {String|Array|Function} `loaders` Loaders to use for adding views to the created collection.\n   * @return {Object} Returns the `Assemble` instance for chaining.\n   * @api public\n   */\n\n  create: function (name, opts, loaders) {\n    var args = utils.slice(arguments, 1);\n    opts = lazy.clone(args.shift());\n    loaders = args;\n\n    var single = lazy.inflect.singularize(name);\n    var plural = lazy.inflect.pluralize(name);\n    this.inflections[single] = plural;\n\n    if (typeof opts.renameKey === 'undefined' && this.options.renameKey) {\n      opts.renameKey = this.options.renameKey;\n    }\n\n    opts.plural = plural;\n    opts.inflection = single;\n    opts.loaders = loaders;\n    opts.app = this;\n    opts = lazy.extend({}, opts, this.options);\n\n    if (!opts.loaderType) {\n      opts.loaderType = 'sync';\n    }\n\n    var Views = this.get('Views');\n    var views = new Views(opts);\n    this.viewType(plural, views.viewType());\n\n    // add custom View constructor for collection items\n    var ViewClass = viewFactory(single, opts);\n    var classKey = single[0].toUpperCase() + single.slice(1);\n    this.define(classKey, ViewClass);\n\n    // init the collection object on `views`\n    this.views[plural] = views;\n    this.loader(plural, opts, loaders);\n\n    // wrap loaders to expose the collection and opts\n    utils.defineProp(opts, 'wrap', views.wrap.bind(views, opts));\n    opts.defaultLoader = opts.defaultLoader || 'default';\n\n    // create the actual loader function\n    var fn = this.compose(plural, opts);\n    views.forward(fn, ['forOwn']);\n\n    // forward collection methods onto loader\n    utils.setProto(fn, views);\n\n    // add loader methods to the instance: `app.pages()`\n    this.mixin(single, fn);\n    this.mixin(plural, fn);\n\n    // decorate named loader methods back to the collection\n    // to allow chaining like `.pages().pages()` etc\n    utils.defineProp(views, plural, fn);\n    utils.defineProp(views, single, fn);\n\n    // add collection and view (item) helpers\n    helpers.collection(this, views, opts);\n    helpers.view(this, views, opts);\n    return this;\n  },\n\n  /**\n   * Set view types for a collection.\n   *\n   * @param {String} `plural` e.g. `pages`\n   * @param {Object} `options`\n   */\n\n  viewType: function(plural, types) {\n    var len = types.length, i = 0;\n    while (len--) {\n      var type = types[i++];\n      this.viewTypes[type] = this.viewTypes[type] || [];\n      if (this.viewTypes[type].indexOf(plural) === -1) {\n        this.viewTypes[type].push(plural);\n      }\n    }\n    return types;\n  },\n\n  /**\n   * Add `Router` to the prototype\n   */\n\n  Router: lazy.router.Router,\n\n  /**\n   * Lazily initalize `router`, to allow options to\n   * be passed in after init.\n   */\n\n  lazyRouter: function() {\n    if (typeof this.router === 'undefined') {\n      this.define('router', new this.Router({\n        methods: utils.methods\n      }));\n    }\n  },\n\n  /**\n   * Handle middleware for the given `view` and locals.\n   *\n   * ```js\n   * app.handle('customHandle', view);\n   * ```\n   *\n   * @name .handle\n   * @param {String} `method` Router VERB\n   * @param {Object} `view` View object\n   * @param {Object} `locals`\n   * @param {Function} `cb`\n   * @return {Object}\n   * @api public\n   */\n\n  handle: function (method, view, locals, cb) {\n    if (typeof locals === 'function') {\n      cb = locals;\n      locals = {};\n    }\n\n    this.lazyRouter();\n    view.options = view.options || {};\n    view.options.handled = view.options.handled || [];\n\n    if (typeof cb !== 'function') {\n      cb = this.handleError(method, view);\n    }\n\n    view.options.method = method;\n    view.options.handled.push(method);\n    if (view.emit) {\n      view.emit('handle', method);\n    }\n\n    this.router.handle(view, function (err) {\n      if (err) return cb(err);\n      cb(null, view);\n    });\n  },\n\n  /**\n   * Run the given handler only if the view has not\n   * already been handled by the method\n   *\n   * @name .handleView\n   * @param  {Object} `collection` Collection name\n   * @param  {Object} `locals`\n   * @return {Array} Returns an array of view objects with rendered content.\n   */\n\n  handleView: function (method, view, locals/*, cb*/) {\n    if (view.options.handled.indexOf(method) === -1) {\n      this.handle.apply(this, arguments);\n    }\n    this.emit(method, view, locals);\n  },\n\n  /**\n   * Handle middleware errors.\n   */\n\n  handleError: function(method, view) {\n    return function (err) {\n      if (err) {\n        err.reason = 'Template#handle' + method + ': ' + view.path;\n        return err;\n      }\n    };\n  },\n\n  /**\n   * Special-cased \"all\" method, applying the given route `path`,\n   * middleware, and callback.\n   *\n   * @name .all\n   * @param {String} `path`\n   * @param {Function} `callback`\n   * @return {Object} `this` for chaining\n   */\n\n  all: function(path/*, callback*/) {\n    this.lazyRouter();\n    var route = this.router.route(path);\n    route.all.apply(route, [].slice.call(arguments, 1));\n    return this;\n  },\n\n  /**\n   * Proxy to `Router#param`\n   *\n   * @name .param\n   * @param {String} `name`\n   * @param {Function} `fn`\n   * @return {Object} Returns the instance of `Template` for chaining.\n   */\n\n  param: function(/*name, fn*/) {\n    this.lazyRouter();\n    this.router.param.apply(this.router, arguments);\n    return this;\n  },\n\n  /**\n   * Apply a layout to the given `view`.\n   *\n   * @name .applyLayout\n   * @param  {Object} `view`\n   * @return {Object} Returns a `view` object.\n   */\n\n  applyLayout: function(view) {\n    if (view.options.layoutApplied) {\n      return view;\n    }\n\n    // handle pre-layout middleware\n    this.handle('preLayout', view);\n\n    var opts = {};\n    lazy.extend(opts, this.options);\n    lazy.extend(opts, view.options);\n    lazy.extend(opts, view.context());\n\n    // get the layout stack\n    var stack = {};\n    var alias = this.viewTypes.layout;\n    var len = alias.length, i = 0;\n\n    while (len--) {\n      var views = this.views[alias[i++]];\n      for (var key in views) {\n        var val = views[key];\n        if (views.hasOwnProperty(key) && typeof val !== 'function' && val.path) {\n          stack[key] = val;\n        }\n      }\n    }\n\n    // get the name of the first layout\n    var name = view.layout;\n    var str = view.content;\n    var self = this;\n\n    if (!name) return view;\n\n    // Handle each layout before it's applied to a view\n    function handleLayout(layoutObj) {\n      view.currentLayout = layoutObj.layout;\n      self.handle('onLayout', view);\n      delete view.currentLayout;\n    }\n\n    // actually apply the layout\n    var res = lazy.layouts(str, name, stack, opts, handleLayout);\n\n    view.option('layoutStack', res.history);\n    view.option('layoutApplied', true);\n    view.content = res.result;\n\n    // handle post-layout middleware\n    this.handle('postLayout', view);\n    return view;\n  },\n\n  /**\n   * Compile `content` with the given `locals`.\n   *\n   * ```js\n   * var blogPost = app.post('2015-09-01-foo-bar');\n   * var view = app.compile(blogPost);\n   * // view.fn => [function]\n   * ```\n   *\n   * @name .compile\n   * @param  {Object|String} `view` View object.\n   * @param  {Object} `locals`\n   * @param  {Boolean} `isAsync` Load async helpers\n   * @return {Object} View object with `fn` property with the compiled function.\n   * @api public\n   */\n\n  compile: function(view, locals, isAsync) {\n    if (typeof locals === 'boolean') {\n      isAsync = locals;\n      locals = {};\n    }\n\n    // get the engine to use\n    locals = locals || {};\n    var engine = this.engine(locals.engine ? locals.engine : view.engine);\n\n    if (typeof engine === 'undefined') {\n      throw this.error('compile', 'engine', view);\n    }\n    if (!engine.hasOwnProperty('compile')) {\n      throw this.error('compile', 'method', engine);\n    }\n\n    view.ctx('compile', locals);\n    // build the context to pass to the engine\n    var ctx = view.context(locals);\n    // apply layout\n    view = this.applyLayout(view, ctx);\n    // handle `preCompile` middleware\n    this.handleView('preCompile', view, locals);\n\n    // Bind context to helpers before passing to the engine.\n    this.bindHelpers(view, locals, ctx, (locals.async = isAsync));\n    var settings = lazy.extend({}, ctx, locals);\n\n    // compile the string\n    view.fn = engine.compile(view.content, settings);\n    // handle `postCompile` middleware\n    this.handleView('postCompile', view, locals);\n    return view;\n  },\n\n  /**\n   * Render `content` with the given `locals` and `callback`.\n   *\n   * ```js\n   * var blogPost = app.post('2015-09-01-foo-bar');\n   * app.render(blogPost, function(err, view) {\n   *   // `view` is an object with a rendered `content` property\n   * });\n   * ```\n   *\n   * @name .render\n   * @param  {Object|String} `file` String or normalized template object.\n   * @param  {Object} `locals` Locals to pass to registered view engines.\n   * @param  {Function} `callback`\n   * @api public\n   */\n\n  render: function (view, locals, cb) {\n    if (typeof locals === 'function') {\n      cb = locals;\n      locals = {};\n    }\n\n    // if `view` is a function, it's probably from chaining\n    // a collection method\n    if (typeof view === 'function') {\n      return view.call(this);\n    }\n\n    // if `view` is a string, see if it's a cache view\n    if (typeof view === 'string') {\n      view = this.lookup(view);\n    }\n\n    locals = locals || {};\n\n    // add `locals` to `view.contexts`\n    view.ctx('render', locals);\n    var data = this.cache.data;\n    for (var key in locals) {\n      if (locals.hasOwnProperty(key) && !data.hasOwnProperty(key)) {\n        data[key] = locals[key];\n      }\n    }\n\n    // handle `preRender` middleware\n    this.handleView('preRender', view, locals);\n\n    // build the context for the view\n    var ctx = this.context(locals);\n\n    // get the engine\n    var engine = this.engine(locals.engine ? locals.engine : view.engine);\n\n    if (typeof cb !== 'function') {\n      throw this.error('render', 'callback');\n    }\n    if (typeof engine === 'undefined') {\n      throw this.error('render', 'engine', path.extname(view.path));\n    }\n    if (!engine.hasOwnProperty('render')) {\n      throw this.error('render', 'method', JSON.stringify(view));\n    }\n\n    // if it's not already compiled, do that first\n    if (typeof view.fn !== 'function') {\n      try {\n        var isAsync = typeof cb === 'function';\n        view = this.compile(view, locals, isAsync);\n        return this.render(view, locals, cb);\n      } catch (err) {\n        this.emit('error', err);\n        return cb.call(this, err);\n      }\n    }\n\n    var context = this.context(view, ctx, locals);\n\n    // render the view\n    return engine.render(view.fn, context, function (err, res) {\n      if (err) {\n        this.emit('error', err);\n        return cb.call(this, err);\n      }\n      // handle `postRender` middleware\n      view.content = res;\n      this.handle('postRender', view, locals, cb);\n    }.bind(this));\n  },\n\n  /**\n   * Merge \"partials\" view types. This is necessary for template\n   * engines that only support one class of partials.\n   *\n   * @name .mergePartials\n   * @param {Object} `locals`\n   * @param {Array} `viewTypes` Optionally pass an array of viewTypes to include.\n   * @return {Object} Merged partials\n   */\n\n  mergePartials: function (locals, viewTypes) {\n    var names = viewTypes || this.viewTypes.partial;\n    var opts = lazy.extend({}, this.options, locals);\n\n    return names.reduce(function (acc, name) {\n      var collection = this.views[name];\n\n      lazy.forOwn(collection, function (view, key) {\n        // handle `onMerge` middleware\n        this.handleView('onMerge', view, locals);\n\n        if (view.options.nomerge) return;\n        if (opts.mergePartials !== false) {\n          name = 'partials';\n        }\n        acc[name] = acc[name] || {};\n        acc[name][key] = view.content;\n      }, this);\n      return acc;\n    }.bind(this), {});\n  },\n\n  /**\n   * Build the context for the given `view` and `locals`.\n   * This can be overridden by passing a function to the\n   * `mergeContext` option.\n   *\n   * @name .context\n   * @param  {Object} `view` Template object\n   * @param  {Object} `locals`\n   * @return {Object} The object to be passed to engines/views as context.\n   */\n\n  context: function (view, ctx, locals) {\n    var obj = {};\n    lazy.mixin(obj, ctx);\n    lazy.mixin(obj, this.cache.data);\n    lazy.mixin(obj, view.data);\n    lazy.mixin(obj, view.locals);\n    lazy.mixin(obj, locals);\n    return obj;\n  },\n\n  /**\n   * Build the context for the given `view` and `locals`.\n   */\n\n  bindHelpers: function (view, locals, context, isAsync) {\n    var helpers = {};\n    lazy.extend(helpers, this.options.helpers);\n    lazy.extend(helpers, this._.helpers.sync);\n\n    if (isAsync) lazy.extend(helpers, this._.helpers.async);\n    lazy.extend(helpers, locals.helpers);\n\n    // build the context to expose as `this` in helpers\n    var thisArg = {};\n    thisArg.options = lazy.extend({}, this.options, locals);\n    thisArg.context = context || {};\n    thisArg.context.view = view;\n    thisArg.app = this;\n\n    // bind template helpers to the instance\n    locals.helpers = utils.bindAll(helpers, thisArg);\n  },\n\n  /**\n   * Add a router handler.\n   *\n   * @param  {String} `method` Method name.\n   */\n\n  handler: function (methods) {\n    this.handlers(methods);\n  },\n\n  /**\n   * Add default Router handlers to Template.\n   */\n\n  handlers: function (methods) {\n    this.lazyRouter();\n    this.router.method(methods);\n    utils.arrayify(methods).forEach(function (method) {\n      this.define(method, function(path) {\n        var route = this.router.route(path);\n        var args = [].slice.call(arguments, 1);\n        route[method].apply(route, args);\n        return this;\n      }.bind(this));\n    }.bind(this));\n  },\n\n  /**\n   * Format an error\n   */\n\n  error: function(method, id, msg) {\n    return new Error(this.errors[method][id] + 'Template#' + method + ' ' + msg);\n  },\n\n  /**\n   * Add a method to the Template prototype\n   */\n\n  mixin: function (name, fn) {\n    Template.prototype[name] = fn;\n  },\n\n  /**\n   * Define a non-enumerable property on the instance.\n   *\n   * @param  {String} key The property name.\n   * @param  {any} value Property value.\n   * @return {Object} Returns the instance of `Template` for chaining.\n   */\n\n  define: function (key, value) {\n    utils.defineProp(this, key, value);\n    return this;\n  },\n\n  /**\n   * Call the given method on each value in `obj`.\n   */\n\n  visit: function (method, obj) {\n    lazy.visit(this, method, obj);\n    return this;\n  }\n});\n\n/**\n *\n * Expose `extend`, static method for allowing other classes to inherit\n * from the `Item` class (and receive all of Item's prototype methods).\n *\n * ```js\n * function MyCustomItem(options) {...}\n * Item.lazy.extend(MyCustomItem);\n * ```\n *\n * @param  {Object} `Ctor` Constructor function to extend with `Item`\n * @return {undefined}\n */\n\nTemplate.extend = function(Ctor) {\n  util.inherits(Ctor, Template);\n  lazy.extend(Ctor, Template);\n};\n\n/**\n * Expose `Template`\n */\n\nmodule.exports = Template;\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/factory/view.js":"'use strict';\n\nfunction viewFactory (type, options) {\n  options = options || {};\n  var View = options.View || require('../view');\n  var collection = options.collection;\n  function Ctor(view) {\n    if (typeof view.content === 'undefined' && Buffer.isBuffer(view.contents)) {\n      view.content = view.contents.toString();\n    }\n    collection.set(view.path, view);\n    return collection.get(view.path);\n  }\n  View.extend(Ctor);\n  return Ctor;\n}\n\nmodule.exports = viewFactory;\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/engines.js":"'use strict';\n\nvar utils = require('./utils');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('engine-cache', 'EngineCache');\n\n\nmodule.exports = function (app) {\n  app.engines = {};\n  app._.engines = new lazy.EngineCache(app.engines);\n\n  /**\n   * Expose `engine` methods on `app`\n   */\n\n  app.visit('mixin', {\n\n    /**\n     * Register the given view engine callback `fn` as `ext`.\n     *\n     * @param {String|Array} `exts` File extension or array of extensions.\n     * @param {Function|Object} `fn` or `options`\n     * @param {Object} `options`\n     * @api public\n     */\n\n    engine: function(exts, fn, options) {\n      if (arguments.length === 1 && typeof exts === 'string') {\n        return this.getEngine(exts);\n      }\n      exts = utils.arrayify(exts);\n      var len = exts.length;\n      while (len--) {\n        var ext = exts[len];\n        if (ext && ext[0] !== '.') ext = '.' + ext;\n        this._.engines.setEngine(ext, fn, options);\n      }\n      return this;\n    },\n\n    /**\n     * Get the engine settings registered for the given `ext`.\n     *\n     * @param {String} `ext` The engine to get.\n     * @api public\n     */\n\n    getEngine: function(ext) {\n      ext = ext || this.option('view engine');\n      if (ext && ext[0] !== '.') {\n        ext = '.' + ext;\n      }\n      return this._.engines.getEngine(ext);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/utils.js":"'use strict';\n\nvar path = require('path');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('is-extendable', 'isObject');\nlazy('extend-shallow', 'extend');\nlazy('arr-flatten', 'flatten');\nlazy('object.reduce', 'reduce');\nlazy('micromatch', 'mm');\n\n/**\n * Expose `utils`\n */\n\nvar utils = module.exports;\n\n/**\n * Delegate non-enumerable properties from `provider` to `receiver`.\n *\n * @param  {Object} `receiver`\n * @param  {Object} `provider`\n */\n\nutils.delegate = require('delegate-properties');\n\n/**\n * Add a non-enumerable property to `receiver`\n *\n * @param  {Object} `obj`\n * @param  {String} `name`\n * @param  {Function} `val`\n */\n\nutils.defineProp = require('define-property');\n\n/**\n * Properties to allow on the root of a template from vinyl file objects\n */\n\nutils.vinylProps = [\n  'base',\n  'contents',\n  'content',\n  'history',\n  'path',\n  'relative'\n];\n\n/**\n * Default router methods used in all Template instances\n */\n\nutils.methods = [\n  'onLoad',\n  'preCompile',\n  'preLayout',\n  'onLayout',\n  'postLayout',\n  'onMerge',\n  'postCompile',\n  'preRender',\n  'postRender'\n];\n\n/**\n * Format an error object.\n */\n\nutils.error = function error(msg, val) {\n  throw new Error(msg + JSON.stringify(val));\n};\n\n/**\n * Arrayify the given value by casting it to an array.\n */\n\nutils.arrayify = function arrayify(val) {\n  return val ? (Array.isArray(val) ? val : [val]) : [];\n};\n\n/**\n * Noop\n */\n\nutils.noop = function noop() {\n  return;\n};\n\n/**\n * Returns the first argument passed to the function.\n */\n\nutils.identity = function identity(val) {\n  return val;\n};\n\n/**\n * Class utils\n */\n\nutils.setProto = function setProto(obj, proto) {\n  return Object.setPrototypeOf\n    ? Object.setPrototypeOf(obj, proto)\n    : (obj.__proto__ = proto);\n};\n\n/**\n * Forward late-bound methods onto the `receiver` instance,\n * which will later be invoked in the context of the provider.\n */\n\nutils.forward = function forward(receiver, provider, methods) {\n  methods.forEach(function (method) {\n    receiver[method] = function () {\n      return provider[method].apply(provider, arguments);\n    };\n  });\n  return receiver;\n};\n\n/**\n * Bind a `thisArg` to all the functions on the target\n *\n * @param  {Object|Array} `target` Object or Array with functions as values that will be bound.\n * @param  {Object} `thisArg` Object to bind to the functions\n * @return {Object|Array} Object or Array with bound functions.\n */\n\nutils.bindAll = function bindAll(target, thisArg) {\n  if (Array.isArray(target)) {\n    return utils.bindEach(target, thisArg);\n  }\n  return lazy.reduce(target, function (acc, fn, key) {\n    if (typeof fn === 'object' && typeof fn !== 'function') {\n      acc[key] = utils.bindAll(fn, thisArg);\n    } else {\n      acc[key] = fn.bind(thisArg);\n      if (fn.async) {\n        acc[key].async = fn.async;\n      }\n    }\n    return acc;\n  }, {});\n};\n\n/**\n * Return true if the given value is a loader.\n *\n * @param  {Object} `val`\n * @return {Boolean}\n */\n\nutils.isLoader = function isLoader(val, cache) {\n  return typeof val === 'function'\n    || cache && typeof val === 'string' && cache[val]\n    || utils.isStream(val)\n    || utils.isPromise(val)\n    || Array.isArray(val);\n};\n\n/**\n * Return true if the given object is a stream.\n *\n * @param  {Object} `val`\n * @return {Boolean}\n */\n\nutils.isStream = function isStream (val) {\n  return val && lazy.isObject(val) && typeof val.pipe === 'function';\n};\n\n/**\n * Return true if the given object is a promise.\n *\n * @param  {Object} `val`\n * @return {Boolean}\n */\n\nutils.isPromise = function isPromise (val) {\n  return val && lazy.isObject(val) && typeof val.then === 'function';\n};\n\n/**\n * Rename each key in the give `obj`\n */\n\nutils.rename = function rename(views, fn) {\n  if (typeof fn !== 'function') {\n    fn = path.basename;\n  }\n  for (var key in views) {\n    if (views.hasOwnProperty(key)) {\n      views[fn(key)] = views[key];\n      delete views[key];\n    }\n  }\n};\n\n/**\n * Matching utils\n * ------------------------------------\n */\n\n/**\n * Return the first object with a key that matches\n * the given glob pattern.\n *\n * @param {Object} `object`\n * @param {String|Array} `patterns`\n * @param {Object} `options`\n * @return {Object}\n */\n\nutils.matchKey = function matchKey(obj, patterns, options) {\n  if (typeof obj === 'undefined') return null;\n  var keys = lazy.mm(Object.keys(obj), patterns, options);\n  return obj[keys[0]];\n};\n\n/**\n * Return all objects with keys that match\n * the given glob pattern.\n *\n * @param {Object} `object`\n * @param {String|Array} `patterns`\n * @param {Object} `options`\n * @return {Object}\n */\n\nutils.matchKeys = function matchKeys(obj, patterns, options) {\n  var keys = lazy.mm(Object.keys(obj), patterns, options).sort();\n  var len = keys.length, i = 0;\n  var res = {};\n\n  while (len--) {\n    var key = keys[i++];\n    res[key] = obj[key];\n  }\n  return res;\n};\n\n/**\n * Arguments utils\n * ------------------------------------\n */\n\n/**\n * Separate args from options. Returns an array with\n * two elements, where the first element is options\n * and the second an array of arguments.\n */\n\nutils.slice = function slice(arr, i) {\n  var args = [].slice.call(arr, i);\n  var opts = {};\n  if (!utils.isLoader(args[0])) {\n    opts = args.shift();\n  }\n  var last = args[args.length - 1];\n  if (lazy.isObject(last) && !utils.isLoader(last)) {\n    lazy.extend(opts, args.pop());\n  }\n  opts = opts || {};\n  return lazy.flatten([opts, args]);\n};\n\n/**\n * Get locals from arguments.\n *\n * @param  {Object} locals\n * @param  {Object} options\n */\n\nutils.getLocals = function getLocals(locals, options) {\n  options = options || {};\n  locals = locals || {};\n  var ctx = {};\n\n  if (options.hasOwnProperty('hash')) {\n    lazy.extend(ctx, locals);\n    lazy.extend(ctx, options.hash);\n\n  } else if (locals.hasOwnProperty('hash')) {\n    lazy.extend(ctx, locals.hash);\n\n  } else if (!locals.hasOwnProperty('hash') && !options.hasOwnProperty('hash')) {\n    lazy.extend(ctx, options);\n    lazy.extend(ctx, locals);\n  }\n  return ctx;\n};\n\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/loaders/index.js":"module.exports = require('export-files')(__dirname);\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/loaders/base.js":"'use strict';\n\nvar utils = require('../utils');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('matched', 'glob');\nlazy('extend-shallow', 'extend');\nlazy('load-templates', 'loader');\nlazy('for-own');\n\n/**\n * Fallback loader to use when no other loaders are defined.\n */\n\nmodule.exports = function (app) {\n  var config = lazy.extend({rootKeys: utils.vinylProps}, app.options);\n\n  app.loader('base-glob', function () {\n    return lazy.glob.sync.apply(lazy.glob, arguments);\n  });\n\n  app.loader('helpers', { loaderType: 'sync' }, require('./helpers'));\n  app.loader('default', { loaderType: 'sync' }, function firstSync(views, opts) {\n    return first(views, opts);\n  });\n\n  function first(collection, options) {\n    var opts = lazy.extend({}, config, options, collection.options);\n    if (typeof opts.cwd === 'undefined' && app.options.cwd) {\n      opts.cwd = app.options.cwd;\n    }\n\n    var loader = new lazy.loader(opts);\n\n    return function (key, val, locals, options) {\n      options = lazy.extend({}, opts, options);\n\n      if (typeof key === 'function') {\n        var fn = key;\n        lazy.forOwn(collection, fn(collection, options));\n        return collection;\n      }\n\n      if (!Array.isArray(key) && typeof key === 'object') {\n        collection.visit('addView', key);\n        return collection;\n      }\n\n      var res = loader.load.apply(loader, arguments);\n      collection.visit('addView', res);\n      return collection;\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/loaders/data.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\n/**\n * Data loaders. This is initialized in the `init` method,\n * and the loaders are called in the `app.data` method.\n */\n\nmodule.exports = function (app) {\n  app.loader('data', ['base-glob'], function (files) {\n    return files.reduce(function (acc, fp) {\n      var data = JSON.parse(fs.readFileSync(fp, 'utf8'));\n      var name = path.basename(fp, path.extname(fp));\n      if (name === 'data') {\n        app.visit('data', data);\n      } else {\n        acc[name] = data;\n      }\n      return acc;\n    }, app.cache.data);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/loaders/helpers.js":"'use strict';\n\nvar utils = require('../utils');\nvar path = require('path');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('kind-of', 'typeOf');\nlazy('matched', 'glob');\nlazy('object.reduce', 'reduce');\n\n/**\n * Default helpers loader\n */\n\nmodule.exports = function loadHelpers(helpers, options) {\n  var o = {};\n  if (lazy.typeOf(helpers) === 'object') {\n    return helpers;\n  }\n  helpers = utils.arrayify(helpers);\n  // if it's an object, it's not a glob\n  if (lazy.typeOf(helpers[0]) === 'object') {\n    return mergeHelpers(helpers, o);\n  }\n  return resolveHelpers(helpers, options);\n};\n\nfunction mergeHelpers(helpers, obj) {\n  for (var key in helpers) {\n    var val = helpers[key];\n\n    if (typeof val === 'object') {\n      mergeHelpers(val, obj);\n    } else {\n      obj[key] = helpers[key];\n    }\n  }\n  return obj;\n}\n\nfunction resolveHelpers(helpers, opts) {\n  opts = opts || {};\n  var cwd = opts.cwd || process.cwd();\n  var files = lazy.glob.sync(helpers, opts);\n\n  return lazy.reduce(files, function (acc, fp) {\n    fp = path.join(opts.cwd, fp);\n    var name = path.basename(fp, path.extname(fp));\n    acc[name] = require(path.resolve(fp));\n    return acc;\n  }, {});\n}\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/loaders/iterators.js":"'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function (app) {\n  app.iterator('sync', function sync(stack) {\n    stack = stack.filter(Boolean);\n    if (stack.length === 0) {\n      return utils.identity;\n    }\n    return function () {\n      var args = [].slice.call(arguments);\n      var init = stack[0].apply(app, args);\n      if (stack.length === 1) return init;\n\n      return stack.slice(1).reduce(function (val, fn) {\n        return fn.call(app, val);\n      }.bind(app), init);\n    }.bind(app);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/helpers/index.js":"module.exports = require('export-files')(__dirname);\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/helpers/collection.js":"'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function (app, collection, options) {\n  var plural = options.plural;\n  var single = options.inflection;\n\n  /**\n   * Create async helpers for each default template `type`.\n   *\n   * @param {String} `type` The type of template.\n   * @param {String} `plural` Plural form of `type`.\n   * @api private\n   */\n\n  app.asyncHelper(single, function (key, locals, opts, cb) {\n    var args = [].slice.call(arguments, 1);\n    cb = args.pop();\n\n    try {\n      var view = app.lookup(key, plural);\n      if (!Object.keys(view).length) {\n        view = collection[key];\n      }\n\n      if (!view || !Object.keys(view).length) {\n        app.emit('error', 'missing ' + single + ' `' + key + '`');\n        return cb(null, '');\n      }\n\n      var locs = utils.getLocals.apply(utils.getLocals, args);\n      locs = locs || {};\n      view.ctx('helper', locs);\n\n      view.render(locs, function (err, res) {\n        if (err) return cb(err);\n        return cb(null, res.content);\n      });\n\n    } catch(err) {\n      app.emit('error', 'in helper: ' + single + ': ' + key, err);\n      cb(null, '');\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/helpers/methods.js":"'use strict';\n\nvar path = require('path');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('is-extendable', 'isObject');\nlazy('helper-cache', 'Helpers');\nlazy('is-glob');\n\n\nmodule.exports = function (app) {\n  app._.helpers = {};\n  app._.helpers.sync = new lazy.Helpers({ bind: false });\n  app._.helpers.async = new lazy.Helpers({ bind: false });\n\n  app.visit('mixin', {\n\n    /**\n     * Load helpers.\n     *\n     * @param  {String|Array|Object} `helpers` Glob patterns or an object of helpers.\n     * @return {Object}\n     * @api public\n     */\n\n    loadHelpers: function() {\n      var fn = app.compose({ loaderType: 'sync' }, ['helpers']);\n      return fn.apply(app, arguments);\n    },\n\n    /**\n     * Get a helper.\n     *\n     * @param {String} `name`\n     * @api public\n     */\n\n    getHelper: function(name) {\n      return this._.helpers.sync.getHelper(name);\n    },\n\n    /**\n     * Get an async helper.\n     *\n     * @param {String} `name`\n     * @api public\n     */\n\n    getAsyncHelper: function(name) {\n      return this._.helpers.async.getHelper(name);\n    },\n\n    /**\n     * Register a template helper.\n     *\n     * @param {String} `key` Helper name\n     * @param {Function} `fn` Helper function.\n     * @api public\n     */\n\n    helper: function(name, fn) {\n      this._.helpers.sync.addHelper(name, fn);\n      return this;\n    },\n\n    /**\n     * Register multiple template helpers.\n     *\n     * @param {Object|Array} `helpers` Object, array of objects, or glob patterns.\n     * @api public\n     */\n\n    helpers: function(helpers, options) {\n      if (typeof helpers === 'object') {\n        this.visit('helper', helpers);\n        return this;\n      }\n\n      if (lazy.isGlob(helpers)) {\n        this.loader('helpers-glob', ['base-glob'], function (files) {\n          return files.map(function (fp) {\n            return require(path.resolve(fp));\n          });\n        });\n\n        var res = this.compose('helpers-glob')(helpers, options);\n        this.visit('helper', res);\n        return this;\n      }\n\n      if (typeof helpers === 'string') {\n        console.log('loading helpers from a string is not implemented yet.');\n      }\n      return this;\n    },\n\n    /**\n     * Register an async template helper.\n     *\n     * @param {String} `name` Helper name.\n     * @param {Function} `fn` Helper function\n     * @api public\n     */\n\n    asyncHelper: function(name, fn) {\n      this._.helpers.async.addAsyncHelper(name, fn);\n      return this;\n    },\n\n    /**\n     * Register multiple async template helpers.\n     *\n     * @param {Object|Array} `helpers` Object, array of objects, or glob patterns.\n     * @api public\n     */\n\n    asyncHelpers: function(helpers, options) {\n      if (lazy.isObject(helpers)) {\n        this.visit('asyncHelper', helpers);\n        return this;\n      }\n      if (typeof helpers === 'string') {\n        // todo\n      }\n      return this;\n    },\n\n    /**\n     * Register an object of helpers for the given `ext` (engine).\n     *\n     * @param {String} `ext` The engine to register helpers with.\n     * @return {Object} Object of helpers for the specified engine.\n     * @api public\n     */\n\n    engineHelpers: function(ext) {\n      return app.getEngine(ext).helpers;\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/helpers/view.js":"'use strict';\n\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('get-value', 'get');\nlazy('for-in');\nlazy('for-own');\n\nmodule.exports = function (app, collection, view, options) {\n  // var helpers = {\n\n  //   /**\n  //    * Get a value from `view`\n  //    */\n\n  //   get: function (prop) {\n  //     return lazy.get(view, prop);\n  //   },\n\n  //   /**\n  //    * Get an option from `view`\n  //    */\n\n  //   option: function(prop) {\n  //     return lazy.get(view.options, prop);\n  //   },\n\n  //   /**\n  //    * Iterate over the 'own' keys in `view`.\n  //    */\n\n  //   forOwn: function (cb) {\n  //     var res = {};\n  //     lazy.forOwn(this, function (value, key, obj) {\n  //       if (cb(value, key, obj)) {\n  //         res[key] = value;\n  //       }\n  //     }, this);\n  //     return res;\n  //   },\n\n  //   /**\n  //    * Iterate over the keys in `view`\n  //    */\n\n  //   forIn: function (cb) {\n  //     var res = {};\n  //     lazy.forIn(this, function (value, key, obj) {\n  //       if (cb(value, key, obj)) {\n  //         res[key] = value;\n  //       }\n  //     }, this);\n  //     return res;\n  //   }\n  // };\n\n  // return helpers;\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/lookup.js":"'use strict';\n\nvar utils = require('./utils');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('is-extendable', 'isObject');\n\nmodule.exports = function (app) {\n  app.visit('mixin', {\n\n    /**\n     * Returns the first template from the given collection with a key\n     * that matches the given glob pattern.\n     *\n     * ```js\n     * var pages = app.matchView('pages', 'home.*');\n     * //=> {'home.hbs': { ... }, ...}\n     *\n     * var posts = app.matchView('posts', '2010-*');\n     * //=> {'2015-10-10.md': { ... }, ...}\n     * ```\n     *\n     * @param {String} `collection` Collection name.\n     * @param {String} `pattern` glob pattern\n     * @param {Object} `options` options to pass to [micromatch]\n     * @return {Object}\n     * @api public\n     */\n\n    matchView: function(collection, pattern, options) {\n      var views = this.getViews(collection);\n      if (views.hasOwnProperty(pattern)) {\n        return views[pattern];\n      }\n      return utils.matchKey(views, pattern, options);\n    },\n\n    /**\n     * Returns any templates from the specified collection with keys\n     * that match the given glob pattern.\n     *\n     * ```js\n     * var pages = app.matchViews('pages', 'home.*');\n     * //=> {'home.hbs': { ... }, ...}\n     *\n     * var posts = app.matchViews('posts', '2010-*');\n     * //=> {'2015-10-10.md': { ... }, ...}\n     * ```\n     *\n     * @param {String} `collection` Collection name.\n     * @param {String} `pattern` glob pattern\n     * @param {Object} `options` options to pass to [micromatch]\n     * @return {Object}\n     * @api public\n     */\n\n    matchViews: function(collection, pattern, options) {\n      var views = this.getViews(collection);\n      return utils.matchKeys(views, pattern, options);\n    },\n\n    /**\n     * Get a specific template from the specified collection.\n     *\n     * ```js\n     * app.getView('pages', 'a.hbs', function(fp) {\n     *   return path.basename(fp);\n     * });\n     * ```\n     *\n     * @param {String} `collectionName` Collection name, like `pages`\n     * @param {String} `key` Template name\n     * @param {Function} `fn` Optionally pass a `renameKey` function\n     * @return {Object}\n     * @api public\n     */\n\n    getView: function(collection, key, fn) {\n      var views = this.getViews(collection);\n      // if a custom renameKey function is passed, try using it\n      if (typeof fn === 'function') {\n        key = fn(key);\n      }\n      if (views.hasOwnProperty(key)) {\n        return views[key];\n      }\n      // try again with the default renameKey function\n      fn = this.option('renameKey');\n      var name;\n      if (typeof fn === 'function') {\n        name = fn(key);\n      }\n      if (name && name !== key && views.hasOwnProperty(name)) {\n        return views[name];\n      }\n      return null;\n    },\n\n    /**\n     * Get a view `collection` by its singular or plural name.\n     *\n     * ```js\n     * var pages = app.getViews('pages');\n     * //=> { pages: {'home.hbs': { ... }}\n     *\n     * var posts = app.getViews('posts');\n     * //=> { posts: {'2015-10-10.md': { ... }}\n     * ```\n     *\n     * @param {String} `plural` The plural collection name, e.g. `pages`\n     * @return {Object}\n     * @api public\n     */\n\n    getViews: function(plural) {\n      if (lazy.isObject(plural)) return plural;\n      if (!this.views.hasOwnProperty(plural)) {\n        plural = this.inflections[plural];\n      }\n      if (!this.views.hasOwnProperty(plural)) {\n        throw new Error('getViews cannot find collection' + plural);\n      }\n      return this.views[plural];\n    },\n\n    /**\n     * Find a stashed view.\n     */\n\n    lookup: function (view, collection) {\n      if (typeof view === 'string') {\n\n        if (typeof collection === 'string') {\n          return this[collection].get(view);\n        }\n\n        var collections = this.viewTypes.renderable;\n        var len = collections.length, i = 0;\n        while (len--) {\n          var plural = collections[i++];\n          var views = this.views[plural];\n          var res;\n          if (res = views[view]) {\n            return res;\n          }\n        }\n      }\n      return null;\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/base.js":"'use strict';\n\nvar util = require('util');\nvar Emitter = require('component-emitter');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('extend-shallow', 'extend');\nlazy('collection-visit', 'visit');\nlazy('clone-deep', 'clone');\nlazy('for-in', 'forIn');\nlazy('for-own', 'forOwn');\nlazy('object.omit', 'omit');\nlazy('object.pick', 'pick');\nlazy('get-value', 'get');\nlazy('set-value', 'set');\n\n/**\n * Local modules\n */\n\nvar utils = require('./utils');\n\n/**\n * Create an instance of `Base` with specified `options.\n *\n * The `Base` class extends `Collection`, `List` and `Item`\n * with common methods, properties and behavior.\n *\n * ```js\n * function MyClass(options) {\n *   Base.call(this, options);\n * }\n * Base.extend(MyClass);\n * ```\n * @param {Object} `options`\n * @return {undefined}\n * @api public\n */\n\nfunction Base(options) {\n  this.define('options', options || {});\n  this.define('hints', this.hints || {});\n  this.define('data', this.data || {});\n  this.define('app', this.app || this.options.app || {});\n  this.define('_cache', {});\n  this.define('_callbacks', this._callbacks);\n\n  if (typeof this.options.mixins === 'object') {\n    this.visit('mixin', this.options.mixins);\n  }\n}\n\n/**\n * `Base` prototype methods\n */\n\nBase.prototype = Emitter({\n  constructor: Base,\n\n  /**\n   * Get a value if it exists, otherwise call the given function\n   * and cache the result and return it on subsequent calls.\n   *\n   * @param  {String} `key`\n   * @param  {any} `val`\n   * @return {any}\n   * @api public\n   */\n\n  fragmentCache: function (key, val) {\n    if (this._cache[key]) {\n      return this._cache[key];\n    }\n    if (typeof val === 'function') {\n      val = val.call(this);\n    }\n    return (this._cache[key] = val);\n  },\n\n  /**\n   * Return a clone of the instance.\n   *\n   * ```js\n   * var foo = app.clone();\n   * ```\n   * @param  {Array} keys Optionally pass an array of keys to omit.\n   * @return {Object}\n   * @api public\n   */\n\n  clone: function (keys) {\n    var Parent = this.constructor;\n    var opts = lazy.clone(this.options);\n    var res = new Parent(opts);\n\n    lazy.omit(this, keys, function (val, key) {\n      res[key] = lazy.clone(val);\n    });\n    return res;\n  },\n\n  /**\n   * Set a non-enumerable \"hint\".\n   *\n   * @param  {String} `key`\n   * @return {any}\n   */\n\n  hint: function (key, val) {\n    if (arguments.length === 1) {\n      return this.hints[key];\n    }\n    this.hints[key] = val;\n    return this;\n  },\n\n  /**\n   * Assign `value` to `key`.\n   *\n   * ```js\n   * app.set(key, value);\n   * ```\n   *\n   * @param {String} `key`\n   * @param {*} `value`\n   * @return {Object} `app` instance, to enable chaining\n   * @api public\n   */\n\n  set: function (prop, val) {\n    lazy.set(this, prop, val);\n    return this;\n  },\n\n  /**\n   * Get the value of `key`.\n   *\n   * ```js\n   * app.get(key);\n   * ```\n   *\n   * @param {String} `key`\n   * @return {any}\n   * @api public\n   */\n\n  get: function (prop) {\n    return lazy.get(this, prop);\n  },\n\n  /**\n   * Set or get an option.\n   */\n\n  option: function(key, val) {\n    var len = arguments.length;\n    if (typeof key === 'string' && len === 1) {\n      return lazy.get(this.options, key);\n    }\n\n    if (typeof key === 'object') {\n      this.visit('option', key);\n      return this;\n    }\n\n    lazy.set(this.options, key, val);\n    this.emit('option', key, val);\n    return this;\n  },\n\n  /**\n   * Enable `key`.\n   *\n   * ```js\n   * app.enable('a');\n   * ```\n   * @param {String} `key`\n   * @return {Object} `Options`to enable chaining\n   * @api public\n   */\n\n  enable: function(key) {\n    this.option(key, true);\n    return this;\n  },\n\n  /**\n   * Disable `key`.\n   *\n   * ```js\n   * app.disable('a');\n   * ```\n   *\n   * @param {String} `key` The option to disable.\n   * @return {Object} `Options`to enable chaining\n   * @api public\n   */\n\n  disable: function(key) {\n    this.option(key, false);\n    return this;\n  },\n\n  /**\n   * Check if `key` is enabled (truthy).\n   *\n   * ```js\n   * app.enabled('a');\n   * //=> false\n   *\n   * app.enable('a');\n   * app.enabled('a');\n   * //=> true\n   * ```\n   *\n   * @param {String} `key`\n   * @return {Boolean}\n   * @api public\n   */\n\n  enabled: function(key) {\n    return Boolean(this.options[key]);\n  },\n\n  /**\n   * Check if `key` is disabled (falsey).\n   *\n   * ```js\n   * app.disabled('a');\n   * //=> true\n   *\n   * app.enable('a');\n   * app.disabled('a');\n   * //=> false\n   * ```\n   *\n   * @param {String} `key`\n   * @return {Boolean} Returns true if `key` is disabled.\n   * @api public\n   */\n\n  disabled: function(key) {\n    return !Boolean(this.options[key]);\n  },\n\n  /**\n   * Get an option from either the view, collection, or app instance,\n   * in that order.\n   *\n   * @param  {String} prop Property name. Dot notation may be used.\n   * @return {any}\n   * @api public\n   */\n\n  pickOption: function(prop) {\n    var opt = this.option(prop);\n    if (typeof opt === 'undefined') {\n      return this.app && this.app.option ? this.app.option(prop) : null;\n    }\n    return opt;\n  },\n\n  /**\n   * Resolves the renaming function to use on `view` keys.\n   */\n\n  renameKey: function (key, fn) {\n    if (typeof key === 'function') {\n      fn = key;\n      key = null;\n    }\n    if (typeof fn !== 'function') {\n      fn = this.pickOption('renameKey');\n    }\n    if (typeof fn !== 'function') {\n      fn = utils.identity;\n    }\n\n    this.options.renameKey = fn;\n    if (arguments.length === 2) {\n      return fn(key);\n    }\n    if (typeof key === 'string') {\n      return fn(key);\n    }\n    return fn;\n  },\n\n  /**\n   * Run a plugin on the collection instance.\n   */\n\n  use: function (fn) {\n    fn.call(this, this, this.options);\n    return this;\n  },\n\n  /**\n   * Return a clone of item, without the given keys.\n   */\n\n  omit: function(keys) {\n    keys = [].concat.apply([], arguments);\n    return lazy.omit(this.clone(), keys);\n  },\n\n  /**\n   * Return a clone of item, with only the given keys.\n   */\n\n  pick: function(keys) {\n    keys = [].concat.apply([], arguments);\n    return lazy.pick(this.clone(), keys);\n  },\n\n  /**\n   * Iterate over the 'own' keys on the object.\n   */\n\n  forOwn: function (fn) {\n    lazy.forOwn(this, fn, this);\n    return this;\n  },\n\n  /**\n   * Iterate over the keys on the object\n   */\n\n  forIn: function (fn) {\n    lazy.forIn(this, fn, this);\n    return this;\n  },\n\n  /**\n   * Call the given method on all values in `obj`.\n   */\n\n  visit: function (method, obj) {\n    lazy.visit(this, method, obj);\n    return this;\n  },\n\n  /**\n   * Forward the given collection methods onto `obj`\n   */\n\n  forward: function (obj, keys) {\n    utils.forward(obj, this, keys);\n  },\n\n  /**\n   * Define a non-enumerable property on the instance.\n   *\n   * @param  {String} `key` The property name.\n   * @param  {any} `value` Property value.\n   * @return {Object} Returns the instance for chaining.\n   */\n\n  define: function (key, value) {\n    utils.defineProp(this, key, value);\n    return this;\n  },\n\n  /**\n   * Define a non-enumerable property on the instance options.\n   *\n   * @param  {String} `key` The option name.\n   * @param  {any} `value` Option value.\n   * @return {Object} Returns the instance for chaining.\n   */\n\n  defineOption: function (key, value) {\n    utils.defineProp(this.options, key, value);\n    return this;\n  },\n\n  /**\n   * Add a method to the Base prototype\n   */\n\n  mixin: function (name, fn) {\n    Base.prototype[name] = fn;\n  }\n});\n\n/**\n *\n * Expose `extend`, static method for allowing other classes to inherit\n * from the `Base` class (and receive all of Base's prototype methods).\n *\n * ```js\n * function MyClass(options) {...}\n * Base.extend(MyClass);\n * ```\n *\n * @param  {Object} `Ctor` Constructor function to extend with `Base`\n * @return {undefined}\n * @api public\n */\n\nBase.extend = function (Ctor) {\n  util.inherits(Ctor, Base);\n  lazy.extend(Ctor, Base);\n};\n\n/**\n * Expose `Base`\n */\n\nmodule.exports = Base;\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/collection.js":"'use strict';\n\nvar util = require('util');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('extend-shallow', 'extend');\nlazy('for-in', 'forIn');\nlazy('clone-deep', 'clone');\nlazy('set-value', 'set');\nlazy('sort-object', 'sortObj');\n\n/**\n * Local modules\n */\n\nvar Base = require('./base');\nvar utils = require('./utils');\nvar mixins = require('./mixins/collection');\n\n/**\n * Create an instance of `Collection` with the specified `options`.\n * The `Collection` constructor inherits from Base.\n *\n * ```js\n * var collection = new Collection();\n * ```\n * @param {Object} `options`\n * @return {undefined}\n * @api public\n */\n\nfunction Collection(options) {\n  Base.call(this, options);\n  this.define('lists', {});\n  this.define('_items', {});\n  this.define('Item', this.options.Item || require('./item'));\n  this.define('List', this.options.List || require('./list'));\n  mixins(this);\n\n  /**\n   * Get an object representing the current items on the instance.\n   *\n   * ```js\n   * var items = this.items;\n   * ```\n   *\n   * @return {Object} Object of items\n   */\n\n  Object.defineProperty(this, 'items', {\n    enumerable: false,\n    configurable: true,\n    get: function () {\n      return this._items;\n    },\n    set: function (items) {\n      lazy.forIn(items, function (item, key) {\n        delete this._items[key];\n        delete this[key];\n        this.set(key, item);\n      }, this);\n    }\n  });\n}\n\n/**\n * Inherit `Base`\n */\n\nBase.extend(Collection);\n\n/**\n * `Collection` prototype methods\n */\n\nutils.delegate(Collection.prototype, {\n  constructor: Collection,\n\n  /**\n   * Set a value.\n   */\n\n  set: function (prop, val) {\n    this.setItem(prop, val);\n    if (prop === 'app' || prop === 'collection') {\n      this.define(prop, val);\n    } else {\n      lazy.set(this, prop, val);\n    }\n    return this;\n  },\n\n  /**\n   * Set an item\n   */\n\n  setItem: function (prop, val) {\n    if (prop === 'app' || prop === 'collection') {\n      utils.defineProp(this._items, prop, val);\n    } else {\n      this._items[prop] = val;\n    }\n    return this;\n  },\n\n  /**\n   * Get an item\n   */\n\n  getItem: function (prop) {\n    return this._items[prop];\n  },\n\n  /**\n   * Get or create a new list.\n   */\n\n  list: function (name, items) {\n    var List = this.get('List');\n    var list = this.lists[name];\n    if (typeof list === 'undefined') {\n      var opts = lazy.clone(this.options);\n      opts.items = items || this.items;\n      opts.collection = this;\n      this.lists[name] = list = new List(opts);\n    }\n    return list;\n  },\n\n  createList: function () {\n    return this.list.apply(this, arguments);\n  },\n\n  /**\n   * Generate list pages based on the number of views in the collection.\n   * This method should be called pre-render.\n   *\n   * @param  {View} `view` The view use for the view pages.\n   * @param  {Object} `locals` Optional locals to use in rendering.\n   * @param  {Object} `options` Additional options to use.\n   * @param  {Function} `cb` Callback function that returns either an error (`err`) or a collection of view pages (`views`)\n   */\n\n  paginate: function (view, options) {\n    var Item = this.get('Item');\n    if (!(view instanceof Item)) {\n      options = options || view || {};\n      this.app.create('list');\n      this.app.list('list.hbs', {\n        content: 'BEFORE\\n{{#each pagination.items}}{{locals.title}}\\n{{/each}}\\nAFTER',\n        locals: {\n          limit: 2,\n          permalinks: {\n            structure: ':collection/:num.html'\n          }\n        }\n      });\n      view = this.app.list.get('list.hbs');\n    }\n\n    var list = this.list('paginate');\n    var res = list.paginate(view, options);\n    return res;\n  },\n\n  /**\n   * Wrapper function for exposing the collection instance\n   * to loaders.\n   *\n   * @param {Object} `options`\n   * @param {Function} `fn` Loader function\n   */\n\n  wrap: function (options, fn) {\n    return fn(this, options);\n  },\n\n  /**\n   * Return collection items sorted by the given property.\n   */\n\n  sortBy: function (prop, fn) {\n    if (typeof prop === 'function') {\n      fn = prop;\n      prop = undefined;\n    }\n\n    var items = this.items;\n    this.items = lazy.sortObj(items, {\n      prop: prop,\n      get: fn\n    });\n    return this;\n  }\n});\n\n/**\n *\n * Expose `extend`, static method for allowing other classes to inherit\n * from the `Collection` class (and receive all of Collection's prototype methods).\n *\n * ```js\n * function MyCustomCollection(options) {...}\n * Collection.extend(MyCustomCollection);\n * ```\n *\n * @param  {Object} `Ctor` Constructor function to extend with `Collection`\n * @return {undefined}\n * @api public\n */\n\nCollection.extend = function(Ctor) {\n  util.inherits(Ctor, Collection);\n  lazy.extend(Ctor, Collection);\n};\n\n/**\n * Expose `Collection`\n */\n\nmodule.exports = Collection;\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/mixins/collection.js":"'use strict';\n\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('clone-deep', 'clone');\nlazy('recent');\n\nmodule.exports = function (view) {\n  view.visit('mixin', {\n\n    /**\n     * Return the most recent items from a collection. By default, one of\n     * the following properties will be used for sorting, and in the order\n     * specified: `key`, `path`, or `data.date`.\n     *\n     * @param  {String} `prop` The property to sort by.\n     * @param  {String|Object|Array|Function} `pattern` Function, glob patterns, object, array, or string pattern to use for pre-filtering files.\n     * @param  {Object} `options` Options to pass to [micromatch] if glob patterns are used.\n     * @return {Object}\n     */\n\n    recent: function(prop, pattern, options) {\n      var List = this.get('List');\n      var opts = lazy.clone(this.options);\n      var res = new List(opts);\n\n      options = options || {};\n      options.prop = options.prop || prop;\n\n      var obj = {};\n      var views = this.items;\n      for (var key in views) {\n        obj[key] = this[key];\n        obj[key].key = key;\n      }\n\n      var rec = lazy.recent(obj, options);\n      res.visit('item', rec);\n      return res;\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/file.js":"'use strict';\n\nvar util = require('util');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('extend-shallow', 'extend');\nlazy('clone-deep', 'clone');\nlazy('object.omit', 'omit');\nlazy('write');\n\n/**\n * Local dependencies\n */\n\nvar utils = require('./utils');\nvar Item = require('./item');\n\n/**\n * Create an instance of `File`.\n */\n\nfunction File(file, options) {\n  Item.call(this, file, options);\n  this.initFile(file);\n  return file;\n}\n\n/**\n * Inherit `Item`\n */\n\nItem.extend(File);\n\n/**\n * `File` prototype methods\n */\n\nutils.delegate(File.prototype, {\n  constructor: File,\n\n  /**\n   * Initialize file with base properties.\n   */\n\n  initFile: function (file) {\n    this.src = file.src || {};\n    if (this.path) {\n      this.src.path = this.path;\n    }\n    if (Buffer.isBuffer(this.contents)) {\n      this.content = this.contents.toString();\n    }\n    if (this.content) {\n      this.options.orig = this.content;\n    }\n\n    // ensure that `file` has `path` and `content` properties\n    this.validate(file);\n\n    this.options.orig = file.content;\n    this.options.plural = this.collection.options.plural;\n    this.options.handled = this.options.handled = [];\n\n    this.src = file.src || {};\n    this.src.path = this.src.path || this.path;\n\n    // add non-emumerable properties\n    this.defineOption('route', this.options.route);\n    this.define('_callbacks', this._callbacks);\n    file.__proto__ = this;\n    file.path = this.path;\n\n    // handle `onLoad` middleware routes\n    this.app.handle('onLoad', file);\n  },\n\n  /**\n   * Return a clone of the file instance.\n   */\n\n  clone: function (keys) {\n    var Parent = this.constructor;\n    var opts = lazy.clone(this.options);\n    var res = {};\n\n    lazy.omit(this, keys, function (val, key) {\n      res[key] = lazy.clone(val);\n    });\n    return new Parent(res, opts);\n  },\n\n  /**\n   * Get the basename of a file path.\n   */\n\n  renameKey: function(key) {\n    var fn = this.pickOption('renameKey');\n    if (!fn) {\n      fn = this.collection.renameKey || this.app.renameKey;\n    }\n    if (typeof fn !== 'function') return key;\n    return fn(key);\n  },\n\n  /**\n   * Write the item to disk asynchronously.\n   *\n   * @param {String} `fp` Destination filepath.\n   * @param {Function} `cb` Callback function\n   * @returns {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  write: function (fp, cb) {\n    if (typeof fp === 'function') {\n      cb = fp;\n      fp = null;\n    }\n\n    if (typeof cb !== 'function') {\n      throw new Error('async `write` was called without a callback function.');\n    }\n\n    var dest = fp || this.dest.path;\n    var src = this.src.path;\n    var str = this.content;\n\n    if (str) {\n      lazy.write(dest, str, cb);\n    } else {\n      lazy.copy(src, dest, cb);\n    }\n\n    this.emit('write', dest);\n    return this;\n  },\n\n  /**\n   * Write the item to disk synchronously.\n   *\n   * @param  {String} `fp` Destination filepath.\n   * @return {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  writeSync: function (fp) {\n    var dest = fp || this.dest.path;\n    var src = this.src.path;\n    var str = this.content;\n\n    if (str) {\n      lazy.write.sync(dest, str);\n    } else {\n      lazy.copy.sync(src, dest);\n    }\n\n    this.emit('write', dest);\n    return this;\n  },\n\n  /**\n   * Validate a file.\n   */\n\n  validate: function (file) {\n    if (typeof file.path === 'undefined') {\n      utils.error('File#validate `path` is a required field: ', file);\n    }\n  }\n});\n\n/**\n * Ensure that the `layout` property is set on a file.\n */\n\nObject.defineProperty(File.prototype, 'layout', {\n  set: function(val) {\n    this.define('_layout', val);\n  },\n  get: function() {\n    if (typeof this._layout !== 'undefined') {\n      return this._layout;\n    }\n    if (typeof this.data.layout !== 'undefined') {\n      return this.data.layout;\n    }\n    if (typeof this.locals.layout !== 'undefined') {\n      return this.locals.layout;\n    }\n    if (typeof this.options.layout !== 'undefined') {\n      return this.options.layout;\n    }\n  }\n});\n\n/**\n * Expose `extend`, to allow other classes to inherit\n * from the `File` class.\n *\n * ```js\n * function MyFile(options) {...}\n * File.extend(MyFile);\n * ```\n *\n * @param  {Object} `Ctor` Constructor function to extend with `File`\n * @return {undefined}\n * @api public\n */\n\nFile.extend = function (Ctor) {\n  util.inherits(Ctor, File);\n  lazy.extend(Ctor, File);\n};\n\n/**\n * Expose `File`\n */\n\nmodule.exports = File;\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/item.js":"'use strict';\n\nvar util = require('util');\nvar lazy = require('lazy-cache')(require);\nvar Base = require('./base');\nvar utils = require('./utils');\n\nlazy('extend-shallow', 'extend');\n\n/**\n * Create an instance of `Item` with the specified `options`.\n * The `Item` constructor inherits from Base.\n *\n * ```js\n * var item = new Item();\n * ```\n * @param {Object} `options`\n * @return {undefined}\n * @api public\n */\n\nfunction Item(item, options) {\n  Base.call(this, options);\n  this.define('collection', this.options.collection);\n\n  if (typeof item === 'object') {\n    this.visit('set', item);\n  }\n}\n\n/**\n * Inherit `Base`\n */\n\nBase.extend(Item);\n\n/**\n * `Item` prototype methods\n */\n\nutils.delegate(Item.prototype, {\n  constructor: Item,\n\n  /**\n   * Track history for an item: Example: `<tracked: preRender>`\n   */\n\n  track: function(method, note) {\n    if (!this.app.enabled('track changes')) {\n      return;\n    }\n    var state = this.omit('history');\n    state.tracked = {location: method, note: note};\n    state.inspect = function() {\n      return '<' + method + ': ' + note + '>';\n    };\n    this.options.history = this.options.history || [];\n    this.options.history.push(state);\n    return this;\n  },\n\n  /**\n   * Get an option from the item, collection or app instance,\n   * in that order.\n   */\n\n  pickOption: function(prop) {\n    var opt = this.option(prop);\n    if (typeof opt === 'undefined') {\n      opt = this.collection && this.collection.option(prop);\n    }\n    if (typeof opt === 'undefined') {\n      return this.app && this.app.option(prop);\n    }\n    return opt;\n  }\n});\n\n/**\n *\n * Expose `extend`, static method for allowing other classes to inherit\n * from the `Item` class (and receive all of Item's prototype methods).\n *\n * ```js\n * function MyItem(options) {...}\n * Item.extend(MyItem);\n * ```\n *\n * @param  {Object} `Ctor` Constructor function to extend with `Item`\n * @return {undefined}\n * @api public\n */\n\nItem.extend = function(Ctor) {\n  util.inherits(Ctor, Item);\n  lazy.extend(Ctor, Item);\n};\n\n/**\n * Expose `Item`\n */\n\nmodule.exports = Item;\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/list.js":"'use strict';\n\nvar util = require('util');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('extend-shallow', 'extend');\nlazy('filter-values', 'filter');\nlazy('async-each', 'each');\n\n/**\n * Local modules\n */\n\nvar mixins = require('./mixins/list');\nvar utils = require('./utils');\nvar Base = require('./base');\n\n/**\n * Create an instance of `List` with the given options. Lists are\n * arrayified collections, with items that can be sorted, filtered,\n * grouped, and paginated. The `List` constructor inherits from Base.\n *\n * ```js\n * var list = new List();\n * ```\n *\n * @param {Object} `options` `List` options (passed to `Base`)\n * @return {undefined}\n * @api public\n */\n\nfunction List(options) {\n  Base.call(this, options || {});\n  this.items = [];\n  this.define('keyMap', {});\n  this.define('Item', this.options.Item || require('./item'));\n  this.visit('item', this.options.items || {});\n  delete this.options.items;\n  mixins(this);\n}\n\n/**\n * Inherit `Base`\n */\n\nBase.extend(List);\n\n/**\n * `List` prototype methods\n */\n\nutils.delegate(List.prototype, {\n  constructor: List,\n\n  /**\n   * Get or Add an item to the list. Creates a new instance of `Item` when\n   * adding.\n   *\n   * ```js\n   * var list = new List();\n   * list.item('foo', {name: 'foo'});\n   * console.log(list.items);\n   * //=> [{name: 'foo'}]\n   * ```\n   *\n   * @param  {String} `name` Name of the item to get or add.\n   * @param  {Object} `obj` Optional item to add or update.\n   * @return {Object} `item`\n   * @api public\n   */\n\n  item: function(key, value) {\n    if (typeof key !== 'string') {\n      throw new TypeError('item key must be a string.');\n    }\n    if (typeof value === 'undefined') {\n      return this.getItem(key);\n    }\n    this.addItem(key, value);\n    return value;\n  },\n\n  /**\n   * Add a new item or update an existing item.\n   *\n   * ```js\n   * list.addItem('foo', {contents: '...'});\n   * ```\n   *\n   * @param {String} `key`\n   * @param {Object} `value`\n   * @api public\n   */\n\n  addItem: function (key, value) {\n    var Item = this.get('Item');\n\n    if (!(value instanceof Item)) {\n      value = new Item(value);\n    }\n\n    value.key = value.key || key;\n    var i = this.indexOf(key);\n\n    if (i !== -1) {\n      this.items[i] = value;\n    } else {\n      this.items.push(value);\n      this.keyMap[key] = this.items.length - 1;\n    }\n\n    this.emit('item', key, value);\n    return this;\n  },\n\n  /**\n   * Get an item from the list.\n   *\n   * ```js\n   * list.getItem('foo');\n   * //=> {key: 'foo', contents: '...'}\n   * ```\n   * @param  {String} `key`\n   * @return {Object}\n   * @api public\n   */\n\n  getItem: function (key) {\n    return this.items[this.indexOf(key)];\n  },\n\n  /**\n   * Get the index of an item, or `-1` if it doesn't exist.\n   *\n   * @param  {String} `key`\n   * @return {Number} The index of the item.\n   * @api public\n   */\n\n  indexOf: function (key) {\n    var idx = this.keyMap[key];\n    return typeof idx === 'number' ? idx : -1;\n  },\n\n  /**\n   * Return a list of items, filtered to contain only items that return\n   * truthy from the filter function.\n   *\n   * @param  {Function} `fn` Filter function\n   * @return {Array}\n   * @api public\n   */\n\n  filter: function(fn) {\n    this.items = lazy.filter(this.items, fn, this);\n    return this;\n  },\n\n  /**\n   * Iterate over the array of items in the list.\n   *\n   * ```js\n   * list.forEach(function (item) {\n   *   console.log(item);\n   * });\n   * ```\n   *\n   * @param  {Function} `fn` Function called and passed each item.\n   * @return {Object} Returns current instance for chaining\n   * @api public\n   */\n\n  forEach: function (fn) {\n    this.items.forEach(fn.bind(this));\n    return this;\n  },\n\n  /**\n   * Render all items in the list and return an array in the callback.\n   *\n   * @param  {Object} `locals`\n   * @param  {Function} `fn`\n   * @return {Object}\n   * @api public\n   */\n\n  render: function (locals, cb) {\n    if (typeof locals === 'function') {\n      cb = locals;\n      locals = {};\n    }\n\n    lazy.each(this.items, function (item, next) {\n      this.app.render(item, locals, next);\n    }.bind(this), cb);\n  },\n});\n\n/**\n * Expose `extend`, to allow other classes to inherit\n * from the `List` class.\n *\n * ```js\n * function MyList(options) {...}\n * List.extend(MyList);\n * ```\n *\n * @param  {Object} `Ctor` Constructor function to extend with `List`\n * @return {undefined}\n * @api public\n */\n\nList.extend = function(Ctor) {\n  util.inherits(Ctor, List);\n  lazy.extend(Ctor, List);\n};\n\n/**\n * Expose `List`\n */\n\nmodule.exports = List;\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/mixins/list.js":"'use strict';\n\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('extend-shallow', 'extend');\nlazy('group-array');\nlazy('sort-object');\nlazy('array-sort');\nlazy('recent');\n\n/**\n * Expose List mixins\n */\n\nmodule.exports = function (view) {\n\n  /**\n   * Mix methods onto `List`\n   */\n\n  view.visit('mixin', {\n\n    /**\n     * Generate list pages based on the number of views in the collection.\n     * This method should be called pre-render.\n     *\n     * @param  {View} `view` The view to use as a template for pages.\n     * @param  {Object} `options` Additional options to use.\n     * @return {Object} new List object containing the new pages as items.\n     * @api public\n     */\n\n    paginate: function (view, options) {\n      // `paginate` will return a new `List` from the same parent constructor\n      var Parent = this.constructor;\n      // New \"pages\" in the list will use the `View` constructor\n      var View = view.constructor;\n      // ensure that items being paginated are the same as this List's items.\n      var Item = this.get('Item');\n\n      var opts = options || {};\n      var keys = Object.keys(this.keyMap);\n      var items = this.items.map(function (item, i) {\n        item.key = keys[i];\n        return item;\n      });\n\n      var len = items.length, i = 0, pageNum = 1;\n      var totalPages = Math.ceil(len / opts.limit);\n      var self = this;\n\n      // helper function to create a new page to put into the returned list.\n      function createPage() {\n        var page = new View(view.clone(), lazy.extend({}, view.options, opts));\n        page.data.pagination = new Parent(lazy.extend({}, self.options, {Item: Item}));\n        return page;\n      }\n\n      function updateProperties(page) {\n        page.data.pagination.collection = self.options.collection;\n        page.data.pagination.first = 1;\n        page.data.pagination.prev = pageNum === 1 ? 1 : pageNum;\n        page.data.pagination.num = pageNum++;\n        page.data.pagination.next = pageNum >= totalPages ? totalPages : pageNum;\n        page.data.pagination.last = totalPages;\n        page.data.pagination.index = page.data.pagination.num;\n        page.data.pagination.limit = opts.limit;\n        page.data.pagination.total = totalPages;\n      }\n\n      // Create a new list: `pages`\n      var pages = new Parent(lazy.extend({}, this.options, opts, {Item: View}));\n      var page = createPage();\n\n      while (len--) {\n        var item = items[i++];\n        // each item being paginated will go into the pagination list\n        // for the current page\n        page.data.pagination.item(item.key, item);\n        if (i % opts.limit === 0) {\n          updateProperties(page);\n          pages.item('page-' + (pageNum-1), page);\n          page = createPage();\n        }\n      }\n\n      if (i % opts.limit !== 0) {\n        updateProperties(page);\n        pages.item('page-' + (pageNum-1), page);\n      }\n\n      return pages;\n    },\n\n    /**\n     * Sort list items.\n     *\n     * @param  {String} `prop` Property to sort by, undefined to sort by keys.\n     * @param  {Function} `fn` Optional getter function to get items by.\n     * @return {Object} Returns current instance to enable chaining\n     * @api public\n     */\n\n    sortBy: function (prop, fn) {\n      if (typeof prop === 'function') {\n        fn = prop;\n        prop = undefined;\n      }\n\n      if (typeof prop === 'undefined') {\n        return this.sortByKeys(fn);\n      }\n      return this.sortByItems(prop, fn);\n    },\n\n    /**\n     * Sort list items by their keys.\n     *\n     * @param  {Function} `fn` Optional getter function to get items by.\n     * @return {Object} Returns current instance to enable chaining\n     * @api public\n     */\n\n    sortByKeys: function (fn) {\n      var items = this.items;\n      var sorted = lazy.sortObject(this.keyMap, {prop: undefined, get: fn});\n      var keys = Object.keys(sorted);\n      var len = keys.length, i = -1;\n      var arr = new Array(len);\n\n      while (++i < len) {\n        var key = keys[i];\n        arr[i] = items[sorted[key]];\n        sorted[key] = i;\n      }\n\n      this.items = arr;\n      this.keyMap = sorted;\n      return this;\n    },\n\n    /**\n     * Sort list items by a property on each item.\n     *\n     * @param  {String} `prop` Property to sort by.\n     * @param  {Function} `fn` Optional getter function to get items by.\n     * @return {Object} Returns current instance to enable chaining\n     * @api public\n     */\n\n    sortByItems: function (prop) {\n      var keys = Object.keys(this.keyMap);\n      var items = this.items.map(function (item, i) {\n        item.key = keys[i];\n        return item;\n      });\n      var sorted = lazy.arraySort(items, prop);\n      this.items = sorted;\n      this.keyMap = this.items.reduce(function (acc, item, i) {\n        acc[item.key] = i;\n        return acc;\n      }, {});\n      return this;\n    },\n\n    /**\n     * Group list by specified prop string.\n     * Returns list of lists of items.\n     *\n     * ```js\n     * app.posts.groupBy('data.date', function (date) { return new Date(date).getYear(); });\n     * //=> {'2015': [{name: 'page-1'}]}\n     * ```\n     *\n     * @param  {String} `prop` Property string to group by\n     * @param {Function} `fn` Grouping function to use.\n     * @return {Object} new List object with individual groups as items.\n     * @api public\n     */\n\n    groupBy: function () {\n      return lazy.groupArray(this.items, [].slice.call(arguments));\n    },\n\n    /**\n     * Return the most recent items from a collection. By default, one of\n     * the following properties will be used for sorting, and in the order\n     * specified: `key`, `path`, or `data.date`.\n     *\n     * @param  {String} `prop` The property to sort by.\n     * @param  {String|Object|Array|Function} `pattern` Function, glob patterns, object, array, or string pattern to use for pre-filtering files.\n     * @param  {Object} `options` Options to pass to [micromatch] if glob patterns are used.\n     * @return {Object}\n     */\n\n    recent: function(prop, pattern, options) {\n      var obj = {};\n      var items = this.items;\n      for (var key in items) {\n        var val = items[key];\n        if (val && typeof val !== 'function' && val.path) {\n          obj[key] = val;\n        }\n      }\n      this.items = lazy.recent(obj, options);\n      return this;\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/view.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('extend-shallow', 'extend');\nlazy('relative', 'relative');\nlazy('rewrite-ext', 'rewrite');\nlazy('detect-conflicts', 'detect');\nlazy('assign-value', 'assign');\nlazy('clone-deep', 'clone');\nlazy('object.omit', 'omit');\nlazy('copy');\nlazy('write');\n\n/**\n * Local dependencies\n */\n\nvar mixins = require('./mixins/view');\nvar utils = require('./utils');\nvar Item = require('./item');\n\n/**\n * Create an instance of `View`.\n */\n\nfunction View(view, options) {\n  this.history = [];\n  Item.call(this, view, options);\n  this.init(view);\n  return view;\n}\n\n/**\n * Inherit `Item`\n */\n\nItem.extend(View);\n\n/**\n * `View` prototype methods\n */\n\nutils.delegate(View.prototype, {\n  constructor: View,\n\n  /**\n   * Initialize view with base properties.\n   */\n\n  init: function (view) {\n    view.base = view.base || view.cwd || process.cwd();\n    this.src = this.src || {};\n    // ensure that `view` has `path` and `content` properties\n    this.validate(view);\n\n    this.options.orig = view.content;\n    this.options.plural = this.collection.options.plural;\n    this.options.viewType = this.options.viewType = [];\n    this.options.handled = this.options.handled = [];\n\n    this.contexts = view.contexts = {};\n    this.locals = view.locals || {};\n    this.data = view.data || {};\n    mixins(this);\n\n    // add non-emumerable properties\n    this.defineOption('route', this.options.route);\n    this.define('_callbacks', this._callbacks);\n\n    if (view.stat) {\n      utils.defineProp(view, 'history', view.history);\n      utils.defineProp(view, '_contents', view._contents);\n      utils.defineProp(view, 'stat', view.stat);\n    }\n\n    view.__proto__ = this;\n    utils.defineProp(view, '_callbacks', view._callbacks);\n\n    // handle `onLoad` middleware routes\n    this.app.handleView('onLoad', view, view.locals);\n    this.ctx('locals', view.locals);\n    this.ctx('data', view.data);\n  },\n\n  /**\n   * Return a clone of the view instance.\n   */\n\n  clone: function (keys) {\n    var Parent = this.constructor;\n    var opts = lazy.clone(this.options);\n    var res = {};\n\n    lazy.omit(this, keys, function (val, key) {\n      res[key] = lazy.clone(val);\n    });\n    return new Parent(res, opts);\n  },\n\n /**\n  * Synchronously compile a view.\n  *\n  * ```js\n  * var view = page.compile();\n  * console.log(view.fn({title: 'A'}));\n  * console.log(view.fn({title: 'B'}));\n  * console.log(view.fn({title: 'C'}));\n  * ```\n  *\n  * @param  {Object} `locals` Optionally pass locals to the engine.\n  * @return {Object} `View` instance, for chaining.\n  * @api public\n  */\n\n  compile: function(locals) {\n    this.app.compile(this, locals);\n    return this;\n  },\n\n /**\n  * Asynchronously render a view.\n  *\n  * ```js\n  * pages.get('home.md')\n  *   .render({title: 'Home'}, function(err, res) {\n  *      //=> do stuff with `res`\n  *   });\n  * ```\n  *\n  * @param  {Object} `locals` Optionally pass locals to the engine.\n  * @return {Object} `View` instance, for chaining.\n  * @api public\n  */\n\n  render: function(locals, cb) {\n    if (typeof locals === 'function') {\n      cb = locals;\n      locals = {};\n    }\n    this.app.render(this, locals, cb);\n    return this;\n  },\n\n  /**\n   * Get the basename of a view path.\n   */\n\n  renameKey: function(key) {\n    var fn = this.pickOption('renameKey');\n    if (!fn) {\n      fn = this.collection.renameKey || this.app.renameKey;\n    }\n    if (typeof fn !== 'function') return key;\n    return fn(key);\n  },\n\n  /**\n   * Track a context.\n   */\n\n  ctx: function(name, obj) {\n    lazy.assign(this.contexts, name, obj);\n    return this;\n  },\n\n  /**\n   * Build the context for a view.\n   *\n   * @param  {Function} `fn`\n   * @api public\n   */\n\n  context: function(locals, fn) {\n    if (typeof locals === 'function') {\n      fn = locals;\n      locals = {};\n    }\n\n    var res = this.locals;\n    var data = this.app.cache.data;\n    this.ctx('global', data);\n\n    // extend context with same-named data-property from `app.cache.data`\n    if (!this.hint('extended')) {\n      this.hint('extended', true);\n      var name = this.collection.renameKey(this.path);\n      this.ctx('matched', data[name]);\n    }\n\n    this.ctx('data', this.data);\n    this.ctx('options', this.options);\n\n    // build up the array of context keys to calculate\n    var keys = ['global', 'compile', 'render', 'options', 'matched'];\n    if (this.pickOption('prefer locals') === true) {\n      keys = keys.concat(['data', 'locals']);\n    } else {\n      keys = keys.concat(['locals', 'data']);\n    }\n    keys = keys.concat(['helper', 'custom']);\n\n    function calculate(obj, contexts, props) {\n      var len = props.length, i = -1;\n      while (++i < len) {\n        var key = props[i];\n        lazy.extend(obj, contexts[key] || {});\n      }\n    }\n\n    fn = fn || this.pickOption('context');\n    if (typeof fn === 'function') {\n      fn.call(this, res, this.contexts, keys, calculate);\n    } else {\n      calculate(res, this.contexts, keys);\n    }\n\n    locals = locals || {};\n    lazy.extend(res, this.app.mergePartials(locals));\n    lazy.extend(res, locals);\n    return res;\n  },\n\n  read: function (fp) {\n    if (this.contents) return this;\n    fp = path.resolve(this.cwd, fp || this.path);\n    this.contents = fs.readFileSync(fp);\n    return this;\n  },\n\n  /**\n   * Write the item to disk asynchronously.\n   *\n   * @param {String} `fp` Destination filepath.\n   * @param {Function} `cb` Callback function\n   * @returns {Object} Returns the instance for chaining.\n   * @api public\n   */\n\n  write: function (fp, cb) {\n    if (typeof fp === 'function') {\n      cb = fp;\n      fp = null;\n    }\n\n    if (typeof cb !== 'function') {\n      throw new Error('async `write` was called without a callback function.');\n    }\n\n    var dest = fp || this.dest.path;\n    var src = this.src.path;\n    var str = this.content;\n    var opts = this.options || {};\n    if (typeof opts.force !== 'boolean') {\n      opts.force = true;\n    }\n\n    lazy.detect(this, opts, function () {\n      if (str) {\n        lazy.write(dest, str, cb);\n      } else {\n        lazy.copy(src, dest, cb);\n      }\n    });\n\n    this.emit('write', dest);\n    return this;\n  },\n\n  /**\n   * Validate a view.\n   */\n\n  validate: function (view) {\n    if (typeof view.path === 'undefined') {\n      utils.error('View#validate `path` is a required field: ', view);\n    }\n  }\n});\n\n/**\n * Expose `extend`, to allow other classes to inherit\n * from the `View` class.\n *\n * ```js\n * function MyCustomView(options) {...}\n * View.lazy.extend(MyCustomView);\n * ```\n *\n * @param  {Object} `Ctor` Constructor function to extend with `View`\n * @return {undefined}\n * @api public\n */\n\nView.extend = function (Ctor) {\n  util.inherits(Ctor, View);\n  lazy.extend(Ctor, View);\n};\n\nfunction mixin(key, val) {\n  Object.defineProperty(View.prototype, key, val);\n}\n\n/**\n * Ensure that the `layout` property is set on a view.\n */\n\nmixin('content', {\n  set: function(content) {\n    utils.defineProp(this, '_content', content);\n  },\n  get: function() {\n    if (this._content) {\n      return this._content;\n    }\n\n    if (Buffer.isBuffer(this.contents)) {\n      return this.contents.toString();\n    }\n    if (typeof this.path === 'string') {\n      this.read();\n      return this.content;\n    }\n  }\n});\n\n/**\n * Ensure that the `layout` property is set on a view.\n */\n\nmixin('layout', {\n  set: function(val) {\n    this.define('_layout', val);\n  },\n  get: function() {\n    if (typeof this._layout !== 'undefined') {\n      return this._layout;\n    }\n    if (typeof this.data.layout !== 'undefined') {\n      return this.data.layout;\n    }\n    if (typeof this.locals.layout !== 'undefined') {\n      return this.locals.layout;\n    }\n    if (typeof this.options.layout !== 'undefined') {\n      return this.options.layout;\n    }\n  }\n});\n\n/**\n * Ensure that the `engine` property is set on a view.\n */\n\nmixin('engine', {\n  set: function(val) {\n    throw new Error('view.engine is a read-only property and cannot be overwritten.');\n  },\n  get: function() {\n    var engine = this.data.engine\n      || this.locals.engine\n      || path.extname(this.path);\n\n    // fallback on collection engine\n    if (typeof engine === 'undefined') {\n      engine = this.pickOption('engine');\n    }\n\n    if (engine && engine[0] !== '.') {\n      engine = '.' + engine;\n    }\n    return engine;\n  }\n});\n\nmixin('path', {\n  get: function() {\n    return this.history[this.history.length - 1];\n  },\n  set: function(fp) {\n    if (typeof fp !== 'string') {\n      throw new Error('`view.path` must be a string.');\n    }\n    if (fp && fp !== this.path) {\n      this.history.push(fp);\n    }\n  }\n});\n\nmixin('name', {\n  get: function() {\n    return this._name;\n  },\n  set: function(name) {\n    if (name && typeof name !== 'string') {\n      throw new Error('`view.name` must be a string.');\n    }\n    name = name || path.basename(this.path, path.extname(this.path));\n    utils.defineProp(this, '_name', name);\n  }\n});\n\nmixin('cwd', {\n  get: function() {\n    return path.resolve(this._cwd || process.cwd());\n  },\n  set: function(cwd) {\n    utils.defineProp(this, '_cwd', cwd || process.cwd());\n  }\n});\n\nmixin('relative', {\n  get: function() {\n    if (!this.base) {\n      throw new Error('`view.base` must be defined to get relative path.');\n    }\n    if (!this.path) {\n      throw new Error('`view.path` must be defined to get relative path.');\n    }\n    return lazy.relative(this.base, this.path);\n  },\n  set: function() {\n    throw new Error('file.relative is read-only and cannot be overridden.');\n  }\n});\n\nmixin('absolute', {\n  get: function() {\n    if (!this.path) {\n      throw new Error('`view.path` must be defined to get absolute path.');\n    }\n    return path.resolve(this.base, this.path);\n  },\n  set: function() {\n    throw new Error('file.absolute is read-only and cannot be overridden.');\n  }\n});\n\nmixin('dirname', {\n  get: function() {\n    if (!this.path) {\n      throw new Error('`view.path` must be defined to get dirname.');\n    }\n    return path.dirname(this.path);\n  },\n  set: function(dirname) {\n    if (!this.path) {\n      throw new Error('`view.path` must be defined to set dirname.');\n    }\n    this.path = path.join(dirname, path.basename(this.path));\n  }\n});\n\nmixin('basename', {\n  get: function() {\n    if (!this.path) {\n      throw new Error('`view.path` must be defined to get basename.');\n    }\n    return path.basename(this.path);\n  },\n  set: function(basename) {\n    if (!this.path) {\n      throw new Error('`view.path` must be defined to set basename.');\n    }\n    this.path = path.join(path.dirname(this.path), basename);\n  }\n});\n\nmixin('extname', {\n  get: function() {\n    if (!this.path) {\n      throw new Error('`view.path` must be defined to get extname.');\n    }\n    return path.extname(this.path);\n  },\n  set: function(extname) {\n    if (!this.path) {\n      throw new Error('`view.path` must be defined to set extname.');\n    }\n    var ext = extname || this._extname || (this._extname = path.extname(this.path));\n    this.path = lazy.rewrite(this.path, ext);\n  }\n});\n\n/**\n * Expose `View`\n */\n\nmodule.exports = View;\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/mixins/view.js":"'use strict';\n\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('extend-shallow', 'extend');\nlazy('relative-dest', 'dest');\nlazy('get-value', 'get');\nlazy('parse-filepath');\nlazy('dashify');\n\n\nmodule.exports = function (view) {\n  view.visit('mixin', {\n\n    /**\n     * Get the cwd\n     */\n\n    cwd: function (dir) {\n      dir = dir || this.options.cwd;\n      this.options.cwd = dir;\n      return dir;\n    },\n\n    /**\n     * Parse `view.path` into an object.\n     */\n\n    parsePath: function (data) {\n      var parse = function() {\n        var parsed = lazy.extend({}, lazy.parseFilepath(this.path), data);\n        if (typeof parsed.ext === 'undefined') {\n          parsed.ext = parsed.extname;\n        }\n        return parsed;\n      }.bind(this);\n      return this.fragmentCache('path', parse);\n    },\n\n    /**\n     * Returns a slugified filepath. If `filepath` is not passed,\n     * `view.data.slug` or `view.path` will be slugified.\n     */\n\n    slug: function(filepath, fn) {\n      fn = fn || lazy.dashify;\n      if (typeof filepath === 'undefined') {\n        var ctx = this.context();\n        filepath = ctx.slug || this.path;\n      }\n      return fn(filepath);\n    },\n\n    /**\n     * Strip HTML from the given `str` or `view.content`\n     *\n     * @param  {String} str HTML string\n     * @return {String}\n     */\n\n    stripHtml: function(str) {\n      if (typeof str !== 'string') {\n        str = this.content;\n      }\n      if (typeof str !== 'string') return '';\n      str = str.replace(/(<([^>]+)>)/g, '');\n      return str.trim();\n    },\n\n    /**\n     * Generate an excerpt for a view.\n     *\n     * ```js\n     * app.posts.get('foo.md')\n     *   .excerpt()\n     *   .render(function (err, res) {\n     *     //=>\n     *   });\n     * ```\n     *\n     * @param {Object} `options` Excerpt options.\n     *     @option {Object} `template` Template to use for the excerpt tag.\n     * @return {Object}\n     */\n\n    excerpt: function (options) {\n      options = options || {};\n      lazy.extend(options, this.options.excerpt || {});\n\n      var re = /<!--+\\s*more\\s*--+>/;\n      var str = this.content;\n      var view = this;\n\n      var link = options.link || '<a id=\"more\"></a>';\n\n      this.content = str.replace(re, function (match, i) {\n        view.data.excerpt = str.slice(0, i).trim();\n        view.data.more = str.slice(i + match.length).trim() + link;\n        return '';\n      });\n      return this;\n    },\n\n    dest: function (dir) {\n      this.data.dest = this.data.dest || {};\n      if (typeof dir === 'function') {\n        this.data.dest.path = dir(this);\n      } else {\n        // TODO: dest function\n      }\n      return this;\n    },\n\n    /**\n     * Generate a permalink for a view.\n     *\n     * ```js\n     * app.posts.get('foo.md')\n     *   .render(function (err, res) {\n     *     dest(res.permalink(), res);\n     *     //=>\n     *   });\n     * ```\n     * @param  {Object} `locals` pass any additional locals for context.\n     * @return {String} Returns a permalink string.\n     * @api public\n     */\n\n    permalink: function (structure, locals) {\n      if (typeof structure !== 'string') {\n        locals = structure;\n        structure = null;\n      }\n\n      var self = this;\n\n      var data = {};\n      lazy.extend(data, this);\n      lazy.extend(data, this.parsePath());\n      lazy.extend(data, this.context(locals));\n      this.data.dest = this.data.dest || {};\n\n      var opts = lazy.get(data, 'permalinks') || {};\n      lazy.extend(opts, this.options.permalinks || {});\n\n      if (typeof structure !== 'string') {\n        structure = opts.structure || ':path';\n      }\n\n      return structure.replace(/:(\\w+)(?:\\((.*)\\))?/g, function (m, param, prop) {\n        var res = data[param] || param;\n        if (typeof res === 'function' && prop) {\n          return res.call(data, prop);\n        }\n\n        self.data.dest = res;\n        return res;\n      });\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-template/node_modules/template/lib/views.js":"'use strict';\n\nvar path = require('path');\nvar util = require('util');\nvar lazy = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nlazy('extend-shallow', 'extend');\nlazy('clone-deep', 'clone');\nlazy('kind-of', 'typeOf');\nlazy('has-values', 'has');\nlazy('set-value', 'set');\nlazy('get-value', 'get');\nlazy('micromatch', 'mm');\n\n/**\n * Local dependencies\n */\n\nvar Collection = require('./collection');\nvar utils = require('./utils');\n\n/**\n * Create an instance of `Views`.\n *\n * @api public\n */\n\nfunction Views(options) {\n  Collection.call(this, options);\n  this.options.collection = this.options.collection || this;\n  this.define('View', this.options.View || require('./view'));\n  this.define('Item', this.View);\n}\n\n/**\n * Inherit `Collection`\n */\n\nCollection.extend(Views);\n\n/**\n * `Views` prototype methods\n */\n\nutils.delegate(Views.prototype, {\n  constructor: Views,\n\n  /**\n   * Set a value on the collection instance.\n   *\n   * @param {String} `key`\n   * @param {Object} `val` The view object\n   * @param {Object} Returns the instance of `Views` for chaining.\n   * @api public\n   */\n\n  set: function (key, val) {\n    if (lazy.typeOf(val) !== 'object') {\n      lazy.set(this, key, val);\n      return this;\n    }\n    this.addView(key, val);\n    return this;\n  },\n\n  /**\n   * Add a view to the current collection.\n   *\n   * @param {String} `key`\n   * @param {Object} `val` The view object\n   * @param {Object} Returns the instance of `Views` for chaining.\n   * @api public\n   */\n\n  addView: function (key, val) {\n    var opts = lazy.clone(this.options);\n    var View = this.get('View');\n    val.path = val.path || key;\n    key = val.key = this.renameKey(key);\n    this.setItem(key, (this[key] = new View(val, opts)));\n    return this;\n  },\n\n  /**\n   * Add multiple views to the collection.\n   *\n   * @param {Object} `views`\n   * @param {Object} Returns the instance of `Views` for chaining.\n   * @api public\n   */\n\n  addViews: function (views) {\n    this.visit('addView', views);\n    return this;\n  },\n\n  /**\n   * Get a view.\n   */\n\n  get: function(prop) {\n    var res = this[prop];\n    if (typeof res === 'undefined') {\n      var name = this.renameKey(prop);\n      if (name && name !== prop) {\n        res = this[name];\n      }\n    }\n    if (typeof res === 'undefined') {\n      res = lazy.get(this, prop);\n    }\n    if (typeof res === 'undefined') {\n      res = this.find(prop);\n    }\n    return res;\n  },\n\n  /**\n   * Find a view by `key` or glob pattern.\n   *\n   * @param  {String} `pattern` Key or glob pattern.\n   * @param  {Object} `options` Options for [micromatch]\n   * @return {Object} Matching view.\n   */\n\n  find: function (pattern, options) {\n    var self = this;\n    function find() {\n      var isMatch = lazy.mm.matcher(pattern, options);\n      for (var key in self) {\n        var val = self[key];\n        if (typeof val === 'object' && isMatch(key)) {\n          return val;\n        }\n      }\n    }\n    var res = this.fragmentCache(pattern, find);\n    res.__proto__ = this;\n    return res;\n  },\n\n  /**\n   * Compile a view in the collection.\n   *\n   * @param  {String|Object} `view` View key or object.\n   * @param  {Object} `locals`\n   * @param  {Function} `fn`\n   * @return {Function}\n   */\n\n  compile: function (view/*, locals*/) {\n    var args = [].slice.call(arguments, 1);\n    var app = this.app;\n    if (typeof view === 'string') view = this[view];\n    app.compile.apply(app, [view].concat(args));\n    return this;\n  },\n\n  /**\n   * Render a view in the collection.\n   *\n   * @param  {String|Object} `view` View key or object.\n   * @param  {Object} `locals`\n   * @param  {Function} `fn`\n   * @return {Object}\n   */\n\n  render: function (view/*, locals, fn*/) {\n    var args = [].slice.call(arguments, 1);\n    var app = this.app;\n    if (typeof view === 'string') view = this[view];\n\n    app.render.apply(app, [view].concat(args));\n    return this;\n  },\n\n  /**\n   * Filter views by the given `prop`, using the specified `pattern` and `options.\n   *\n   * @param  {String} `prop` The property to sort by.\n   * @param  {String|Object|Array|Function} `pattern` Function, glob patterns, object, array, or string pattern to use for pre-filtering views.\n   * @param  {Object} `options`\n   * @option  {Object} `limit` [options]\n   * @option  {Object} `limit` [options]\n   * @return {Object}\n   */\n\n  filter: function (prop, pattern, options) {\n    options = options || {};\n    var views = this.items;\n    var res = Object.create(this);\n\n    var matcher = pattern ? lazy.mm.isMatch(pattern, options) : null;\n    for (var key in views) {\n       if (views.hasOwnProperty(key)) {\n        var file = views[key];\n        if (prop === 'key') {\n          if (matcher) {\n            if (matcher(path.relative(process.cwd(), key))) {\n              res[key] = file;\n            }\n          } else {\n            res[key] = file;\n          }\n        } else {\n          var val = lazy.get(file, prop);\n          if (prop === 'path' || prop === 'cwd') {\n            val = path.relative(process.cwd(), val);\n          }\n\n          if (lazy.has(val)) {\n            if (matcher) {\n              if (matcher(val)) {\n                res[key] = file;\n              }\n            } else {\n              res[key] = file;\n            }\n          }\n        }\n      }\n    }\n    return res;\n  },\n\n  /**\n   * Set view types for the collection.\n   *\n   * @param {String} `plural` e.g. `pages`\n   * @param {Object} `options`\n   * @api private\n   */\n\n  viewType: function() {\n    this.options.viewType = utils.arrayify(this.options.viewType || []);\n    if (this.options.viewType.length === 0) {\n      this.options.viewType.push('renderable');\n    }\n    return this.options.viewType;\n  }\n});\n\n/**\n * Expose `extend`, to allow other classes to inherit\n * from the `Views` class.\n *\n * ```js\n * function MyViews(options) {...}\n * Views.extend(MyViews);\n * ```\n *\n * @param  {Object} `Ctor` Constructor function to extend with `Views`\n * @return {undefined}\n * @api public\n */\n\nViews.extend = function (Ctor) {\n  util.inherits(Ctor, Views);\n  lazy.extend(Ctor, Views);\n};\n\n/**\n * Expose `Views`\n */\n\nmodule.exports = Views;\n"}